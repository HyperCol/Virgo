vignette        = false
oldHandLight    = false
oldLighting     = false
separateAo      = false

dhShadow.enabled=false
particles.before.deferred=true
rain.depth=true

sliders=Camera_Exporsure_Value Camera_ISO Camera_FPS Film_Grain Camera_Aperture Camera_Focal_Length TAA_Post_Processing_Sharpeness TAA_Sampling_Sharpeness TAA_Post_Sharpen_Limit Camera_Saturation_Bias \
Sun_Light_Exposure Sky_Light_Exposure Emission_Texture_Exposure Camera_Auto_Min_EV Camera_Auto_Max_EV Bloom_Exporuse \
Diffuse_Accumulation_Frame Sun_Light_Exposure Sky_Light_Exposure GI_Sample_Per_Pixel GI_Bounce GI_Per_Ray_Length Diffuse_Ray_Bounce Diffuse_Ray_Trace_Distance Screen_Space_GI_Quality Indirect_Bounce_Trace_Nerf \
LPV_Accumulation_Frame LPV_Accumulation_Sample LPV_Trace_Distance \
Nature_Light_Exposure Sky_Texture_Exposure \
Parallax_Mapping_Depth_Low_Detail \
Reflcetion_Tracing_Distance Torch_Light_Temperature Lower_Clouds_Distance Lower_Clouds_Scattering

screen=<empty> <empty> <empty> <empty> [Camera_Setting] [Antialiasing] [Lighting_Setting] [Shadow_Setting] [GI_Setting] [Reflection_Setting] [Environment_Setting] [Clouds_Setting] [Resource_Pack] Voxelization_Chunks

screen.Camera_Setting=<empty> <empty> <empty> <empty> Camera_Exporsure_Value Camera_ISO Camera_Auto_Exposure Camera_FPS Camera_Auto_Min_EV Film_Grain Camera_Auto_Max_EV Camera_Saturation_Bias <empty> <empty> Enabled_Bloom Bloom_Exporuse [Camera_Depth_of_Field]
screen.Camera_Depth_of_Field=<empty> <empty> <empty> <empty> Camera_DOF <empty> <empty> <empty> Camera_Aperture <empty> Camera_Focal_Length

screen.Lighting_Setting=<empty> <empty> <empty> <empty> Nature_Light_Exposure Sky_Texture_Exposure Emission_Texture_Exposure Emissive_Light_Exposure Torch_Light_Temperature

screen.Antialiasing=<empty> <empty> <empty> <empty> Enabled_Temporal_AA <empty> <empty> <empty> <empty> TAA_Post_Sharpen_Limit TAA_Post_Processing_Sharpeness <empty> <empty> <empty> TAA_Non_Clip

screen.Resource_Pack=<empty> <empty> <empty> <empty> Tile_Resolution PBR_Format Auto_Detect_Tile_Resolution <empty> <empty> <empty> Parallax_Mapping <empty> Parallax_Mapping_Quality <empty> Voxel_Parallax_Mapping <empty> Parallax_Mapping_Depth_Low_Detail

screen.Environment_Setting=<empty> <empty> <empty> <empty> Rain_Puddles <empty> Rain_Drops_Ripples

screen.Shadow_Setting=<empty> <empty> <empty> <empty> Soft_Shadow <empty> <empty> <empty> Screen_Space_Contact_Shadow <empty> Voxel_Shadow <empty> <empty> <empty> Tweak_Shadow_Leak
screen.Clouds_Setting=<empty> <empty> <empty> <empty> Enabled_Lower_Clouds Lower_Clouds_Scattering Lower_Clouds_Distance

screen.GI_Setting=<empty> <empty> <empty> <empty> Diffuse_Ray_Bounce Diffuse_Tracing_Tranmittance Diffuse_Ray_Trace_Distance Diffuse_Shading_Quality Indirect_Bounce_Trace_Nerf [LPV_Cache_Setting] <empty> <empty> [GI_Blocks_Shape] Diffuse_Spatial_UpSample [GI_Fliter] GI_Prepare_Emissive_Over_Texture [GI_Screen_Space_Tracing] Enabled_GI_Emissive_Texture
screen.GI_Fliter=<empty> <empty> <empty> <empty> Diffuse_Accumulation_Frame <empty> <empty> <empty> GI_A_Trous_Radius GI_A_Trous_1 <empty> GI_A_Trous_2 <empty> GI_A_Trous_3 <empty> GI_A_Trous_4
screen.GI_Blocks_Shape=<empty> <empty> <empty> <empty> Torch_Shape Lantern_Shape
screen.GI_Screen_Space_Tracing=<empty> <empty> <empty> <empty> Enabled_Diffuse_Screen_Space_Tracing <empty> Screen_Space_GI_Quality
screen.Reflection_Setting=<empty> <empty> <empty> <empty> Reflection_Trace_Distance <empty> Reflection_Trace_Bounce <empty> Reflection_Trace_Bounce_Nerf [LPV_Cache_Setting] <empty> <empty> Reflection_Temporal_Accumulation Relfection_Atrous_Filter_1 Reflection_Accumulation_Frame Relfection_Atrous_Filter_2 Reflection_Temporal_Upsample Relfection_Atrous_Filter_3
screen.LPV_Cache_Setting=<empty> <empty> <empty> <empty> LPV_Accumulation_Frame LPV_Trace_Distance LPV_Accumulation_Sample

screen.Misc=<empty> <empty> <empty> <empty> Enabled_Diffuse_Sky_Lightmap Enabled_Diffuse_Sky_Lightmap_Bounce Enabled_Diffuse_Blocks_Lightmap Enabled_Diffuse_Tracing_Sun_Occlusion Enabled_GI_Emissive_Texture GI_Prepare_Emissive_Over_Texture

texture.deferred.depthtex2=libs/textures/stbn_vec3_2Dx1D_128x128x64_0.png
texture.composite.depthtex2=libs/textures/stbn_vec3_2Dx1D_128x128x64_0.png

program.deferred1.enabled=true
program.deferred4.enabled=true
program.deferred5.enabled=false
program.deferred6.enabled=GI_A_Trous_4 && GI_A_Trous_3 && GI_A_Trous_2 && GI_A_Trous_1
program.deferred7.enabled=GI_A_Trous_3 && GI_A_Trous_2 && GI_A_Trous_1
program.deferred8.enabled=GI_A_Trous_2 && GI_A_Trous_1
program.deferred9.enabled=GI_A_Trous_1

program.composite.enabled=false
program.composite1.enabled=false

program.composite2.enabled=true
program.composite3.enabled=true

program.composite4.enabled=true
#denoise, upsample(optional)
program.composite5.enabled=Reflection_Temporal_Accumulation
program.composite6.enabled=Reflection_Temporal_Accumulation
#a-trous fliter
program.composite7.enabled=Relfection_Atrous_Filter_3
program.composite8.enabled=Relfection_Atrous_Filter_2
program.composite9.enabled=true

blend.gbuffers_basic=ONE ZERO ONE ZERO
blend.gbuffers_textured=ONE ZERO ONE ZERO
blend.gbuffers_textured_lit=ONE ZERO ONE ZERO
blend.gbuffers_terrain=ONE ZERO ONE ZERO
blend.gbuffers_water=ONE ZERO ONE ZERO

uniform.biomeRainfall=rainfall

variable.float.invLightVecLength=1.0/sqrt(shadowLightPosition.x*shadowLightPosition.x + shadowLightPosition.y*shadowLightPosition.y + shadowLightPosition.z*shadowLightPosition.z)
variable.float.lightVecX=gbufferModelViewInverse.0.0*shadowLightPosition.x + gbufferModelViewInverse.1.0*shadowLightPosition.y + gbufferModelViewInverse.2.0*shadowLightPosition.z
variable.float.lightVecY=gbufferModelViewInverse.0.1*shadowLightPosition.x + gbufferModelViewInverse.1.1*shadowLightPosition.y + gbufferModelViewInverse.2.1*shadowLightPosition.z
variable.float.lightVecZ=gbufferModelViewInverse.0.2*shadowLightPosition.x + gbufferModelViewInverse.1.2*shadowLightPosition.y + gbufferModelViewInverse.2.2*shadowLightPosition.z
uniform.vec3.lightVector=vec3(shadowLightPosition.x*invLightVecLength, shadowLightPosition.y*invLightVecLength, shadowLightPosition.z*invLightVecLength)
uniform.vec3.worldLightVector=vec3(lightVecX*invLightVecLength, lightVecY*invLightVecLength, lightVecZ*invLightVecLength)

variable.float.invSunVecLength=1.0/sqrt(sunPosition.x*sunPosition.x + sunPosition.y*sunPosition.y + sunPosition.z*sunPosition.z)
variable.float.sunVecX=gbufferModelViewInverse.0.0*sunPosition.x + gbufferModelViewInverse.1.0*sunPosition.y + gbufferModelViewInverse.2.0*sunPosition.z
variable.float.sunVecY=gbufferModelViewInverse.0.1*sunPosition.x + gbufferModelViewInverse.1.1*sunPosition.y + gbufferModelViewInverse.2.1*sunPosition.z
variable.float.sunVecZ=gbufferModelViewInverse.0.2*sunPosition.x + gbufferModelViewInverse.1.2*sunPosition.y + gbufferModelViewInverse.2.2*sunPosition.z
uniform.vec3.sunVector=vec3(sunPosition.x*invSunVecLength, sunPosition.y*invSunVecLength, sunPosition.z*invSunVecLength)
uniform.vec3.worldSunVector=vec3(sunVecX*invSunVecLength, sunVecY*invSunVecLength, sunVecZ*invSunVecLength)

variable.float.invMoonVecLength=1.0/sqrt(moonPosition.x*moonPosition.x + moonPosition.y*moonPosition.y + moonPosition.z*moonPosition.z)
variable.float.moonVecX=gbufferModelViewInverse.0.0*moonPosition.x + gbufferModelViewInverse.1.0*moonPosition.y + gbufferModelViewInverse.2.0*moonPosition.z
variable.float.moonVecY=gbufferModelViewInverse.0.1*moonPosition.x + gbufferModelViewInverse.1.1*moonPosition.y + gbufferModelViewInverse.2.1*moonPosition.z
variable.float.moonVecZ=gbufferModelViewInverse.0.2*moonPosition.x + gbufferModelViewInverse.1.2*moonPosition.y + gbufferModelViewInverse.2.2*moonPosition.z
uniform.vec3.moonVector=vec3(moonPosition.x*invMoonVecLength, moonPosition.y*invMoonVecLength, moonPosition.z*invMoonVecLength)
uniform.vec3.worldMoonVector=vec3(moonVecX*invMoonVecLength, moonVecY*invMoonVecLength, moonVecZ*invMoonVecLength)

variable.float.invUpLength=1.0/sqrt(upPosition.x*upPosition.x + upPosition.y*upPosition.y + upPosition.z*upPosition.z)
uniform.vec3.upVector=vec3(upPosition.x*invUpLength, upPosition.y*invUpLength, upPosition.z*invUpLength)
uniform.vec3.worldUpVector=vec3(0.0, 1.0, 0.0)

variable.int.frameIndex=frameCounter%16
variable.float.invRatio=1.0/1.32471795724474602596
variable.float.jitterx=frac(frameIndex*invRatio)
variable.float.jittery=frac(frameIndex*invRatio*invRatio)
uniform.vec2.jitter=vec2((jitterx * 2.0 - 1.0) / viewWidth, (jittery * 2.0 - 1.0) / viewHeight)
variable.int.frameIndex1=(frameCounter-1)%16
variable.float.jitter1x=frac(frameIndex1*invRatio)
variable.float.jitter1y=frac(frameIndex1*invRatio*invRatio)
uniform.vec2.jitter1=vec2((jitter1x * 2.0 - 1.0) / viewWidth, (jitter1y * 2.0 - 1.0) / viewHeight)

uniform.vec2.resolution=vec2(viewWidth, viewHeight)
uniform.vec2.texelSize=vec2(1.0 / viewWidth, 1.0 / viewHeight)